
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import scanner.TError;
import java.io.FileWriter;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\011\010\000\002\011" +
    "\003\000\002\012\005\000\002\012\006\000\002\013\005" +
    "\000\002\013\003\000\002\014\003\000\002\014\006\000" +
    "\002\051\003\000\002\051\002\000\002\052\003\000\002" +
    "\052\002\000\002\003\010\000\002\003\011\000\002\004" +
    "\003\000\002\004\003\000\002\005\005\000\002\005\003" +
    "\000\002\006\004\000\002\007\003\000\002\007\002\000" +
    "\002\010\003\000\002\010\003\000\002\015\006\000\002" +
    "\042\005\000\002\042\006\000\002\047\003\000\002\047" +
    "\002\000\002\043\005\000\002\043\003\000\002\044\004" +
    "\000\002\044\003\000\002\002\006\000\002\002\004\000" +
    "\002\002\010\000\002\002\011\000\002\002\005\000\002" +
    "\002\004\000\002\002\004\000\002\002\003\000\002\050" +
    "\003\000\002\050\002\000\002\016\004\000\002\016\002" +
    "\000\002\017\003\000\002\017\002\000\002\020\003\000" +
    "\002\020\004\000\002\020\004\000\002\021\013\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\005\000\002\022\004\000\002\022\004\000\002\022\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\003\000" +
    "\002\024\002\000\002\025\003\000\002\025\003\000\002" +
    "\026\004\000\002\026\002\000\002\027\005\000\002\027" +
    "\003\000\002\030\003\000\002\031\003\000\002\031\006" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\004\000\002\034\004" +
    "\000\002\035\004\000\002\035\004\000\002\036\004\000" +
    "\002\036\004\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\040\003\000\002\040\003\000\002\041" +
    "\003\000\002\045\005\000\002\046\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\006\003\005\050\006\001\002\000\004\002" +
    "\241\001\002\000\004\002\uffff\001\002\000\004\064\007" +
    "\001\002\000\004\033\010\001\002\000\012\034\ufff7\045" +
    "\014\056\015\061\ufff7\001\002\000\012\034\ufff8\045\ufff8" +
    "\056\ufff8\061\ufff8\001\002\000\004\065\227\001\002\000" +
    "\012\034\ufff5\045\014\056\015\061\021\001\002\000\004" +
    "\065\uffea\001\002\000\004\065\uffeb\001\002\000\004\034" +
    "\ufff6\001\002\000\004\065\ufff2\001\002\000\004\034\226" +
    "\001\002\000\004\065\ufff1\001\002\000\004\065\023\001" +
    "\002\000\004\011\024\001\002\000\010\012\uffec\045\014" +
    "\056\015\001\002\000\004\065\225\001\002\000\004\012" +
    "\033\001\002\000\006\012\uffef\023\uffef\001\002\000\006" +
    "\012\uffed\023\031\001\002\000\006\045\014\056\015\001" +
    "\002\000\006\012\ufff0\023\ufff0\001\002\000\004\033\034" +
    "\001\002\000\026\033\uffe5\034\uffe5\045\014\046\uffe5\051" +
    "\uffe5\054\uffe5\055\uffe5\056\015\057\uffe5\065\uffe5\001\002" +
    "\000\012\034\ufff4\045\014\056\015\061\021\001\002\000" +
    "\004\034\ufff3\001\002\000\004\065\217\001\002\000\022" +
    "\033\uffe6\034\uffe6\046\uffe6\051\uffe6\054\uffe6\055\uffe6\057" +
    "\uffe6\065\uffe6\001\002\000\022\033\034\034\uffd7\046\057" +
    "\051\056\054\044\055\051\057\055\065\047\001\002\000" +
    "\004\025\216\001\002\000\042\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\012\uffbc\013\uffbc\017\uffbc\020\uffbc\023\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\033\uffbc\035\uffbc\037\213" +
    "\001\002\000\004\065\205\001\002\000\004\011\157\001" +
    "\002\000\022\033\uffd9\034\uffd9\046\uffd9\051\uffd9\054\uffd9" +
    "\055\uffd9\057\uffd9\065\uffd9\001\002\000\044\004\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\011\uffbd\012\uffa4\013\uffa4\017\uffa4" +
    "\020\uffa4\023\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\033" +
    "\uffa4\035\uffa4\037\uffa4\001\002\000\004\034\156\001\002" +
    "\000\004\011\147\001\002\000\022\033\034\034\uffe1\046" +
    "\057\051\056\054\044\055\051\057\055\065\047\001\002" +
    "\000\004\034\uffd8\001\002\000\010\004\136\005\140\027" +
    "\137\001\002\000\024\005\063\011\077\013\067\021\070" +
    "\025\uffd3\053\071\060\066\062\062\065\047\001\002\000" +
    "\004\025\061\001\002\000\004\025\060\001\002\000\022" +
    "\033\uffdb\034\uffdb\046\uffdb\051\uffdb\054\uffdb\055\uffdb\057" +
    "\uffdb\065\uffdb\001\002\000\022\033\uffda\034\uffda\046\uffda" +
    "\051\uffda\054\uffda\055\uffda\057\uffda\065\uffda\001\002\000" +
    "\040\004\uffa9\005\uffa9\006\uffa9\007\uffa9\012\uffa9\013\uffa9" +
    "\017\uffa9\020\uffa9\023\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\033\uffa9\035\uffa9\001\002\000\022\005\063\011\077" +
    "\013\067\021\070\053\071\060\066\062\062\065\047\001" +
    "\002\000\040\004\uffcd\005\uffcd\006\uffcd\007\uffcd\012\uffcd" +
    "\013\uffcd\017\uffcd\020\uffcd\023\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\033\uffcd\035\uffcd\001\002\000\040\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\012\uffa7\013\uffa7\017\uffa7\020" +
    "\uffa7\023\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\033\uffa7" +
    "\035\uffa7\001\002\000\040\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\012\uffa6\013\uffa6\017\uffa6\020\uffa6\023\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\033\uffa6\035\uffa6\001\002\000" +
    "\022\005\063\011\077\013\067\021\070\053\071\060\066" +
    "\062\062\065\047\001\002\000\004\065\132\001\002\000" +
    "\040\004\uffa5\005\uffa5\006\uffa5\007\uffa5\012\uffa5\013\uffa5" +
    "\017\uffa5\020\uffa5\023\uffa5\025\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\033\uffa5\035\uffa5\001\002\000\040\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\012\uffa8\013\uffa8\017\uffa8\020\uffa8\023" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\033\uffa8\035\uffa8" +
    "\001\002\000\040\004\uffce\005\uffce\006\uffce\007\uffce\012" +
    "\uffce\013\uffce\017\uffce\020\uffce\023\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\033\uffce\035\uffce\001\002\000\040\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\012\uffcc\013\uffcc\017\uffcc" +
    "\020\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\033" +
    "\uffcc\035\uffcc\001\002\000\032\004\113\005\101\006\114" +
    "\007\116\013\106\017\103\020\105\025\uffd4\026\112\027" +
    "\110\030\107\035\121\001\002\000\004\025\131\001\002" +
    "\000\022\005\063\011\077\013\067\021\070\053\071\060" +
    "\066\062\062\065\047\001\002\000\032\004\113\005\101" +
    "\006\114\007\116\012\117\013\106\017\103\020\105\026" +
    "\112\027\110\030\107\035\121\001\002\000\022\005\uffb5" +
    "\011\uffb5\013\uffb5\021\uffb5\053\uffb5\060\uffb5\062\uffb5\065" +
    "\uffb5\001\002\000\022\005\uffb9\011\uffb9\013\uffb9\021\uffb9" +
    "\053\uffb9\060\uffb9\062\uffb9\065\uffb9\001\002\000\022\005" +
    "\uffb2\011\uffb2\013\uffb2\021\uffb2\053\uffb2\060\uffb2\062\uffb2" +
    "\065\uffb2\001\002\000\022\005\uffb7\011\uffb7\013\uffb7\021" +
    "\uffb7\053\uffb7\060\uffb7\062\uffb7\065\uffb7\001\002\000\004" +
    "\020\130\001\002\000\004\027\127\001\002\000\024\005" +
    "\uffb0\011\uffb0\013\uffb0\021\uffb0\027\126\053\uffb0\060\uffb0" +
    "\062\uffb0\065\uffb0\001\002\000\004\027\125\001\002\000" +
    "\022\005\063\011\077\013\067\021\070\053\071\060\066" +
    "\062\062\065\047\001\002\000\024\005\uffb1\011\uffb1\013" +
    "\uffb1\021\uffb1\027\123\053\uffb1\060\uffb1\062\uffb1\065\uffb1" +
    "\001\002\000\022\005\uffb6\011\uffb6\013\uffb6\021\uffb6\053" +
    "\uffb6\060\uffb6\062\uffb6\065\uffb6\001\002\000\022\005\uffb4" +
    "\011\uffb4\013\uffb4\021\uffb4\053\uffb4\060\uffb4\062\uffb4\065" +
    "\uffb4\001\002\000\022\005\uffba\011\uffba\013\uffba\021\uffba" +
    "\053\uffba\060\uffba\062\uffba\065\uffba\001\002\000\022\005" +
    "\uffb3\011\uffb3\013\uffb3\021\uffb3\053\uffb3\060\uffb3\062\uffb3" +
    "\065\uffb3\001\002\000\040\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\012\uffc8\013\uffc8\017\uffc8\020\uffc8\023\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\033\uffc8\035\uffc8\001\002\000" +
    "\022\005\uffb8\011\uffb8\013\uffb8\021\uffb8\053\uffb8\060\uffb8" +
    "\062\uffb8\065\uffb8\001\002\000\004\035\122\001\002\000" +
    "\022\005\uffaa\011\uffaa\013\uffaa\021\uffaa\053\uffaa\060\uffaa" +
    "\062\uffaa\065\uffaa\001\002\000\022\005\uffaf\011\uffaf\013" +
    "\uffaf\021\uffaf\053\uffaf\060\uffaf\062\uffaf\065\uffaf\001\002" +
    "\000\040\004\113\005\101\006\114\007\116\012\uffcb\013" +
    "\106\017\103\020\105\023\uffcb\025\uffcb\026\112\027\110" +
    "\030\107\033\uffcb\035\121\001\002\000\022\005\uffad\011" +
    "\uffad\013\uffad\021\uffad\053\uffad\060\uffad\062\uffad\065\uffad" +
    "\001\002\000\022\005\uffae\011\uffae\013\uffae\021\uffae\053" +
    "\uffae\060\uffae\062\uffae\065\uffae\001\002\000\022\005\uffac" +
    "\011\uffac\013\uffac\021\uffac\053\uffac\060\uffac\062\uffac\065" +
    "\uffac\001\002\000\022\005\uffab\011\uffab\013\uffab\021\uffab" +
    "\053\uffab\060\uffab\062\uffab\065\uffab\001\002\000\022\033" +
    "\uffdc\034\uffdc\046\uffdc\051\uffdc\054\uffdc\055\uffdc\057\uffdc" +
    "\065\uffdc\001\002\000\004\021\133\001\002\000\040\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\012\uffa2\013\uffa2\017\uffa2" +
    "\020\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\033" +
    "\uffa2\035\uffa2\001\002\000\040\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\012\uffc9\013\uffc9\017\uffc9\020\uffc9\023\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\033\uffc9\035\uffc9\001\002" +
    "\000\040\004\uffca\005\uffca\006\114\007\116\012\uffca\013" +
    "\106\017\103\020\105\023\uffca\025\uffca\026\112\027\110" +
    "\030\107\033\uffca\035\121\001\002\000\004\027\145\001" +
    "\002\000\022\005\uffd2\011\uffd2\013\uffd2\021\uffd2\053\uffd2" +
    "\060\uffd2\062\uffd2\065\uffd2\001\002\000\004\027\144\001" +
    "\002\000\022\005\063\011\077\013\067\021\070\053\071" +
    "\060\066\062\062\065\047\001\002\000\032\004\113\005" +
    "\101\006\114\007\116\013\106\017\103\020\105\025\143" +
    "\026\112\027\110\030\107\035\121\001\002\000\022\033" +
    "\uffe0\034\uffe0\046\uffe0\051\uffe0\054\uffe0\055\uffe0\057\uffe0" +
    "\065\uffe0\001\002\000\022\005\uffd0\011\uffd0\013\uffd0\021" +
    "\uffd0\053\uffd0\060\uffd0\062\uffd0\065\uffd0\001\002\000\022" +
    "\005\uffd1\011\uffd1\013\uffd1\021\uffd1\053\uffd1\060\uffd1\062" +
    "\uffd1\065\uffd1\001\002\000\004\034\uffe2\001\002\000\022" +
    "\005\063\011\077\013\067\021\070\053\071\060\066\062" +
    "\062\065\047\001\002\000\032\004\113\005\101\006\114" +
    "\007\116\012\151\013\106\017\103\020\105\026\112\027" +
    "\110\030\107\035\121\001\002\000\004\033\034\001\002" +
    "\000\024\033\uffd5\034\uffd5\046\uffd5\051\uffd5\052\153\054" +
    "\uffd5\055\uffd5\057\uffd5\065\uffd5\001\002\000\004\033\034" +
    "\001\002\000\022\033\uffde\034\uffde\046\uffde\051\uffde\054" +
    "\uffde\055\uffde\057\uffde\065\uffde\001\002\000\022\033\uffd6" +
    "\034\uffd6\046\uffd6\051\uffd6\054\uffd6\055\uffd6\057\uffd6\065" +
    "\uffd6\001\002\000\032\033\uffe9\034\uffe9\045\uffe9\046\uffe9" +
    "\051\uffe9\052\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\061" +
    "\uffe9\065\uffe9\001\002\000\024\005\063\011\077\012\uffc4" +
    "\013\067\021\070\053\071\060\066\062\062\065\047\001" +
    "\002\000\034\004\113\005\101\006\114\007\116\012\uffc6" +
    "\013\106\017\103\020\105\023\uffc6\026\112\027\110\030" +
    "\107\035\121\001\002\000\004\012\165\001\002\000\006" +
    "\012\uffc5\023\163\001\002\000\022\005\063\011\077\013" +
    "\067\021\070\053\071\060\066\062\062\065\047\001\002" +
    "\000\034\004\113\005\101\006\114\007\116\012\uffc7\013" +
    "\106\017\103\020\105\023\uffc7\026\112\027\110\030\107" +
    "\035\121\001\002\000\004\047\166\001\002\000\004\011" +
    "\167\001\002\000\004\065\170\001\002\000\006\012\uffc0" +
    "\023\171\001\002\000\024\005\063\011\077\013\067\014" +
    "\176\021\070\053\071\060\066\062\062\065\047\001\002" +
    "\000\004\012\173\001\002\000\040\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\012\uffcf\013\uffcf\017\uffcf\020\uffcf\023\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\033\uffcf\035\uffcf\001" +
    "\002\000\034\004\113\005\101\006\114\007\116\012\uffc3" +
    "\013\106\017\103\020\105\023\uffc3\026\112\027\110\030" +
    "\107\035\121\001\002\000\006\012\uffc1\023\203\001\002" +
    "\000\004\065\201\001\002\000\006\012\uffc2\023\uffc2\001" +
    "\002\000\006\012\uffbe\023\uffbe\001\002\000\004\014\202" +
    "\001\002\000\006\012\uffa3\023\uffa3\001\002\000\024\005" +
    "\063\011\077\013\067\014\176\021\070\053\071\060\066" +
    "\062\062\065\047\001\002\000\006\012\uffbf\023\uffbf\001" +
    "\002\000\004\027\206\001\002\000\022\005\063\011\077" +
    "\013\067\021\070\053\071\060\066\062\062\065\047\001" +
    "\002\000\032\004\113\005\101\006\114\007\116\013\106" +
    "\017\103\020\105\023\210\026\112\027\110\030\107\035" +
    "\121\001\002\000\022\005\063\011\077\013\067\021\070" +
    "\053\071\060\066\062\062\065\047\001\002\000\032\004" +
    "\113\005\101\006\114\007\116\013\106\017\103\020\105" +
    "\026\112\027\110\030\107\033\034\035\121\001\002\000" +
    "\022\033\uffdd\034\uffdd\046\uffdd\051\uffdd\054\uffdd\055\uffdd" +
    "\057\uffdd\065\uffdd\001\002\000\004\062\214\001\002\000" +
    "\004\040\215\001\002\000\040\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\012\uffbb\013\uffbb\017\uffbb\020\uffbb\023\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\033\uffbb\035\uffbb\001\002" +
    "\000\022\033\uffdf\034\uffdf\046\uffdf\051\uffdf\054\uffdf\055" +
    "\uffdf\057\uffdf\065\uffdf\001\002\000\006\023\uffe3\025\uffe3" +
    "\001\002\000\006\023\221\025\222\001\002\000\004\065" +
    "\224\001\002\000\026\033\uffe8\034\uffe8\045\014\046\uffe8" +
    "\051\uffe8\054\uffe8\055\uffe8\056\015\057\uffe8\065\uffe8\001" +
    "\002\000\022\033\uffe7\034\uffe7\046\uffe7\051\uffe7\054\uffe7" +
    "\055\uffe7\057\uffe7\065\uffe7\001\002\000\006\023\uffe4\025" +
    "\uffe4\001\002\000\006\012\uffee\023\uffee\001\002\000\004" +
    "\002\000\001\002\000\010\023\ufffa\025\ufffa\037\236\001" +
    "\002\000\006\023\ufffb\025\ufffb\001\002\000\006\023\232" +
    "\025\233\001\002\000\004\065\227\001\002\000\012\034" +
    "\ufffe\045\014\056\015\061\ufffe\001\002\000\012\034\ufffd" +
    "\045\ufffd\056\ufffd\061\ufffd\001\002\000\006\023\ufffc\025" +
    "\ufffc\001\002\000\004\062\237\001\002\000\004\040\240" +
    "\001\002\000\006\023\ufff9\025\ufff9\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\011\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\011\012\010\051\012\001\001\000\002\001\001\000" +
    "\006\013\230\014\227\001\001\000\012\003\015\004\021" +
    "\010\016\052\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\027\006\026\007\025\010\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\031\010\024\001\001\000\002\001\001" +
    "\000\004\015\034\001\001\000\010\010\036\042\037\047" +
    "\040\001\001\000\010\003\035\004\021\010\016\001\001" +
    "\000\002\001\001\000\004\043\217\001\001\000\002\001" +
    "\001\000\022\002\051\015\045\021\041\030\044\031\053" +
    "\041\042\044\052\050\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\051\015\045\021\041\030\044\031\053" +
    "\041\042\044\145\001\001\000\002\001\001\000\004\020" +
    "\140\001\001\000\024\017\075\021\063\022\074\030\044" +
    "\031\072\037\073\040\071\041\042\046\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\063\022\134\030" +
    "\044\031\072\037\073\040\071\041\042\046\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\063\022\133\030\044\031\072\037\073\040\071" +
    "\041\042\046\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\032\110\033\114\034\101\035\117\036\103\001" +
    "\001\000\002\001\001\000\022\021\063\022\077\030\044" +
    "\031\072\037\073\040\071\041\042\046\064\001\001\000" +
    "\014\032\110\033\114\034\101\035\117\036\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\063\022\123\030" +
    "\044\031\072\037\073\040\071\041\042\046\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\032\110\033\114\034\101\035\117\036\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\032\110\033\114\034\101\035" +
    "\117\036\103\001\001\000\014\032\110\033\114\034\101" +
    "\035\117\036\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\063\022\141\030\044" +
    "\031\072\037\073\040\071\041\042\046\064\001\001\000" +
    "\014\032\110\033\114\034\101\035\117\036\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\063\022\147\030\044\031\072" +
    "\037\073\040\071\041\042\046\064\001\001\000\014\032" +
    "\110\033\114\034\101\035\117\036\103\001\001\000\004" +
    "\015\151\001\001\000\004\016\153\001\001\000\004\015" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\021\063\022\157\023\161\024\160\030" +
    "\044\031\072\037\073\040\071\041\042\046\064\001\001" +
    "\000\014\032\110\033\114\034\101\035\117\036\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\063" +
    "\022\163\030\044\031\072\037\073\040\071\041\042\046" +
    "\064\001\001\000\014\032\110\033\114\034\101\035\117" +
    "\036\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\171\001\001\000\030\021\063" +
    "\022\173\025\177\027\174\030\044\031\072\037\073\040" +
    "\071\041\042\045\176\046\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\032\110\033\114\034\101\035" +
    "\117\036\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\021\063\022\173\025\203\030\044" +
    "\031\072\037\073\040\071\041\042\045\176\046\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\063" +
    "\022\206\030\044\031\072\037\073\040\071\041\042\046" +
    "\064\001\001\000\014\032\110\033\114\034\101\035\117" +
    "\036\103\001\001\000\022\021\063\022\210\030\044\031" +
    "\072\037\073\040\071\041\042\046\064\001\001\000\016" +
    "\015\211\032\110\033\114\034\101\035\117\036\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\036\042\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\234\001\001\000\006\010" +
    "\011\012\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico

    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
        FileWriter fichero = null;
        PrintWriter pw = null;
        try
        {
            fichero = new FileWriter("D:\\Sexto Semestre\\Compiladores\\Compiler\\src\\scanner\\salida.txt");
            pw = new PrintWriter(fichero);
            pw.println("Error Sintactio Recuperado "+lexema+" Linea "+fila+" Columna "+columna);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        };
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= CLASS PROGRAM LLAV field_declm method_declm LLAC 
            {
              String RESULT =null;
		System.out.println("Sentencia analizada correctamente. Sin errores.");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("program",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              String RESULT =null;
		 System.out.println("Error sintactico en la sentencia"); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("program",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_decl ::= type field_decl2 PC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_decl ::= type field_decl2 PC field_decl 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // field_decl2 ::= field_decl2 COMMA field_decl3 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl2",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_decl2 ::= field_decl3 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl2",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl3 ::= alpha_num 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl3",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl3 ::= alpha_num CORC NUM CORD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl3",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_declm ::= field_decl 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_declm",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_declm ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_declm",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_declm ::= method_decl 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_declm",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_declm ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_declm",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl ::= method_decl2 alpha_num PARA method_decl5 PARC block 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl ::= method_decl2 alpha_num PARA method_decl5 PARC block method_decl 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decl2 ::= type 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl2",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_decl2 ::= VOID 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl2",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_decl3 ::= method_decl3 COMMA method_decl4 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl3",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_decl3 ::= method_decl4 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl3",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_decl4 ::= type alpha_num 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl4",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_decl5 ::= method_decl3 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl5",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_decl5 ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl5",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= INT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= BOOLEAN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= LLAV var_declm statement_mm LLAC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_decl ::= type var_decl2 PC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_decl",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_decl ::= type var_decl2 PC var_decl 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_decl",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_declm ::= var_decl 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_declm",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_declm ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_declm",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_decl2 ::= var_decl2 COMMA alpha_num 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_decl2",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_decl2 ::= alpha_num 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_decl2",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_m ::= statement statement_m 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement_m",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_m ::= statement 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement_m",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= location assign_op expr PC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= method_call PC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= IF PARA expr PARC block else_blockm 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= FOR alpha_num EQUAL expr COMMA expr block 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= RETURN exprm PC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= BREAK PC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= CONTINUE PC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= block 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement_mm ::= statement_m 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement_mm",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_mm ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement_mm",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // else_blockm ::= ELSE block 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("else_blockm",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // else_blockm ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("else_blockm",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprm ::= expr 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("exprm",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprm ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("exprm",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign_op ::= EQUAL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("assign_op",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assign_op ::= PLUS EQUAL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("assign_op",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign_op ::= MINUS EQUAL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("assign_op",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // method_call ::= method_name PARA expr3 PARC CALLOUT PARA alpha_num callout_argm PARC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_call",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= location 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= method_call 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= literal 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr bin_op expr 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= MINUS expr 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= EXCLA expr 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= PARA expr PARC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr2 ::= expr2 COMMA expr 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr2",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr2 ::= expr 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr2",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr3 ::= expr2 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr3 ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // callout_arg ::= expr 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_arg",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // callout_arg ::= string_literal 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_arg",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // callout_argm ::= COMMA callout_arg2 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_argm",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // callout_argm ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_argm",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // callout_arg2 ::= callout_arg2 COMMA callout_arg 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_arg2",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // callout_arg2 ::= callout_arg 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_arg2",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // method_name ::= alpha_num 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_name",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // location ::= id 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("location",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // location ::= id CORC NUM CORD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("location",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bin_op ::= arith_op 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bin_op",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bin_op ::= rel_op 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bin_op",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bin_op ::= eq_op 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bin_op",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bin_op ::= cond_op 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bin_op",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arith_op ::= PLUS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("arith_op",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arith_op ::= MINUS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("arith_op",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arith_op ::= MORE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("arith_op",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arith_op ::= DIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("arith_op",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arith_op ::= PERCENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("arith_op",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // rel_op ::= MINUS2 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("rel_op",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // rel_op ::= MINUS3 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("rel_op",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // rel_op ::= MINUS2 EQUAL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("rel_op",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // rel_op ::= MINUS3 EQUAL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("rel_op",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // eq_op ::= EQUAL EQUAL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("eq_op",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // eq_op ::= EXCLA EQUAL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("eq_op",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cond_op ::= CAFE CAFE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("cond_op",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond_op ::= OR OR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("cond_op",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= NUM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("literal",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= bool_literal 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("literal",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= char_literal 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("literal",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // bool_literal ::= TRUE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bool_literal",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bool_literal ::= FALSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bool_literal",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // id ::= alpha_num 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("id",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // string_literal ::= QUOTE alpha_num QUOTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("string_literal",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // char_literal ::= SINGLEQUOTE alpha_num SINGLEQUOTE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("char_literal",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
