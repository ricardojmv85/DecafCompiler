
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import scanner.TError;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import ast.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\010\010\000\002\010" +
    "\007\000\002\010\007\000\002\010\006\000\002\010\003" +
    "\000\002\047\004\000\002\047\005\000\002\050\004\000" +
    "\002\050\004\000\002\052\005\000\002\052\005\000\002" +
    "\051\003\000\002\051\006\000\002\044\004\000\002\044" +
    "\005\000\002\004\006\000\002\004\006\000\002\004\005" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\006\005\000\002\006\005\000\002\005\004\000\002" +
    "\053\003\000\002\053\003\000\002\042\003\000\002\042" +
    "\002\000\002\035\005\000\002\035\006\000\002\036\005" +
    "\000\002\036\003\000\002\011\006\000\002\037\004\000" +
    "\002\037\003\000\002\002\006\000\002\002\004\000\002" +
    "\002\010\000\002\002\011\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\043\003" +
    "\000\002\043\002\000\002\012\004\000\002\012\002\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\015\006\000\002\015\007\000\002\013\003\000\002\013" +
    "\002\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\005\000\002\016\004\000\002\016\004\000" +
    "\002\016\005\000\002\017\005\000\002\017\003\000\002" +
    "\020\003\000\002\020\002\000\002\021\003\000\002\021" +
    "\003\000\002\022\004\000\002\022\002\000\002\023\005" +
    "\000\002\023\003\000\002\024\003\000\002\025\003\000" +
    "\002\025\006\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\004\000" +
    "\002\030\004\000\002\031\004\000\002\031\004\000\002" +
    "\032\004\000\002\032\004\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\046\003\000\002\040\005\000" +
    "\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\003\005\050\006\001\002\000\004\002" +
    "\260\001\002\000\004\002\ufffc\001\002\000\004\063\007" +
    "\001\002\000\004\033\010\001\002\000\014\034\012\045" +
    "\015\056\011\061\017\064\013\001\002\000\004\065\uffe8" +
    "\001\002\000\004\002\ufffd\001\002\000\004\011\uffec\001" +
    "\002\000\014\034\257\045\015\056\011\061\017\064\013" +
    "\001\002\000\004\065\uffe7\001\002\000\014\034\246\045" +
    "\015\056\011\061\017\064\013\001\002\000\004\065\037" +
    "\001\002\000\004\065\037\001\002\000\004\011\216\001" +
    "\002\000\004\033\025\001\002\000\004\025\024\001\002" +
    "\000\014\034\ufffb\045\ufffb\056\ufffb\061\ufffb\064\ufffb\001" +
    "\002\000\030\033\uffe5\034\uffe5\045\015\046\uffe5\047\uffe5" +
    "\051\uffe5\054\uffe5\055\uffe5\056\011\057\uffe5\065\uffe5\001" +
    "\002\000\014\034\ufff3\045\ufff3\056\ufff3\061\ufff3\064\ufff3" +
    "\001\002\000\004\065\037\001\002\000\024\033\uffe6\034" +
    "\uffe6\046\uffe6\047\uffe6\051\uffe6\054\uffe6\055\uffe6\057\uffe6" +
    "\065\uffe6\001\002\000\024\033\025\034\uffd4\046\050\047" +
    "\043\051\046\054\034\055\040\057\047\065\037\001\002" +
    "\000\004\025\207\001\002\000\046\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\011\uffb9\012\uffb8\013\uffb8\017\uffb8\020\uffb8" +
    "\023\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\033\uffb8\035" +
    "\uffb8\037\204\040\uffb8\001\002\000\004\065\037\001\002" +
    "\000\004\011\167\001\002\000\024\033\uffd6\034\uffd6\046" +
    "\uffd6\047\uffd6\051\uffd6\054\uffd6\055\uffd6\057\uffd6\065\uffd6" +
    "\001\002\000\046\004\uff9f\005\uff9f\006\uff9f\007\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\017\uff9f\020\uff9f\023\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\033\uff9f\035\uff9f\037\uff9f\040" +
    "\uff9f\001\002\000\004\011\160\001\002\000\004\034\157" +
    "\001\002\000\024\033\025\034\uffde\046\050\047\043\051" +
    "\046\054\034\055\040\057\047\065\037\001\002\000\004" +
    "\011\140\001\002\000\004\034\uffd5\001\002\000\010\004" +
    "\130\005\132\027\131\001\002\000\004\025\127\001\002" +
    "\000\030\005\065\011\061\013\055\021\057\025\uffcb\047" +
    "\043\053\066\060\060\065\037\066\063\067\062\001\002" +
    "\000\004\025\051\001\002\000\024\033\uffd8\034\uffd8\046" +
    "\uffd8\047\uffd8\051\uffd8\054\uffd8\055\uffd8\057\uffd8\065\uffd8" +
    "\001\002\000\042\004\uffc9\005\uffc9\006\uffc9\007\uffc9\012" +
    "\uffc9\013\uffc9\017\uffc9\020\uffc9\023\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\033\uffc9\035\uffc9\040\uffc9\001\002\000" +
    "\042\004\uffca\005\uffca\006\uffca\007\uffca\012\uffca\013\uffca" +
    "\017\uffca\020\uffca\023\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\033\uffca\035\uffca\040\uffca\001\002\000\032\004\104" +
    "\005\072\006\105\007\107\013\077\017\074\020\076\025" +
    "\uffcc\026\101\027\102\030\100\035\111\001\002\000\026" +
    "\005\065\011\061\013\055\021\057\047\043\053\066\060" +
    "\060\065\037\066\063\067\062\001\002\000\042\004\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\012\uffa3\013\uffa3\017\uffa3\020" +
    "\uffa3\023\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\033\uffa3" +
    "\035\uffa3\040\uffa3\001\002\000\004\065\124\001\002\000" +
    "\042\004\uffa1\005\uffa1\006\uffa1\007\uffa1\012\uffa1\013\uffa1" +
    "\017\uffa1\020\uffa1\023\uffa1\025\uffa1\026\uffa1\027\uffa1\030" +
    "\uffa1\033\uffa1\035\uffa1\040\uffa1\001\002\000\026\005\065" +
    "\011\061\013\055\021\057\047\043\053\066\060\060\065" +
    "\037\066\063\067\062\001\002\000\042\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\012\uffa2\013\uffa2\017\uffa2\020\uffa2\023" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\033\uffa2\035\uffa2" +
    "\040\uffa2\001\002\000\042\004\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\012\uffa5\013\uffa5\017\uffa5\020\uffa5\023\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\033\uffa5\035\uffa5\040\uffa5\001" +
    "\002\000\004\025\121\001\002\000\026\005\065\011\061" +
    "\013\055\021\057\047\043\053\066\060\060\065\037\066" +
    "\063\067\062\001\002\000\042\004\uffa0\005\uffa0\006\uffa0" +
    "\007\uffa0\012\uffa0\013\uffa0\017\uffa0\020\uffa0\023\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\033\uffa0\035\uffa0\040\uffa0" +
    "\001\002\000\042\004\uffa4\005\uffa4\006\uffa4\007\uffa4\012" +
    "\uffa4\013\uffa4\017\uffa4\020\uffa4\023\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\033\uffa4\035\uffa4\040\uffa4\001\002\000" +
    "\042\004\uffc8\005\uffc8\006\uffc8\007\uffc8\012\uffc8\013\uffc8" +
    "\017\uffc8\020\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\033\uffc8\035\uffc8\040\uffc8\001\002\000\042\004\uffc6" +
    "\005\uffc6\006\105\007\107\012\uffc6\013\077\017\074\020" +
    "\076\023\uffc6\025\uffc6\026\101\027\102\030\100\033\uffc6" +
    "\035\111\040\uffc6\001\002\000\026\005\uffb1\011\uffb1\013" +
    "\uffb1\021\uffb1\047\uffb1\053\uffb1\060\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\001\002\000\026\005\uffb5\011\uffb5\013\uffb5\021" +
    "\uffb5\047\uffb5\053\uffb5\060\uffb5\065\uffb5\066\uffb5\067\uffb5" +
    "\001\002\000\026\005\uffae\011\uffae\013\uffae\021\uffae\047" +
    "\uffae\053\uffae\060\uffae\065\uffae\066\uffae\067\uffae\001\002" +
    "\000\026\005\uffb3\011\uffb3\013\uffb3\021\uffb3\047\uffb3\053" +
    "\uffb3\060\uffb3\065\uffb3\066\uffb3\067\uffb3\001\002\000\004" +
    "\020\120\001\002\000\004\027\117\001\002\000\030\005" +
    "\uffac\011\uffac\013\uffac\021\uffac\027\116\047\uffac\053\uffac" +
    "\060\uffac\065\uffac\066\uffac\067\uffac\001\002\000\030\005" +
    "\uffad\011\uffad\013\uffad\021\uffad\027\115\047\uffad\053\uffad" +
    "\060\uffad\065\uffad\066\uffad\067\uffad\001\002\000\004\027" +
    "\114\001\002\000\026\005\065\011\061\013\055\021\057" +
    "\047\043\053\066\060\060\065\037\066\063\067\062\001" +
    "\002\000\026\005\uffb2\011\uffb2\013\uffb2\021\uffb2\047\uffb2" +
    "\053\uffb2\060\uffb2\065\uffb2\066\uffb2\067\uffb2\001\002\000" +
    "\026\005\uffb0\011\uffb0\013\uffb0\021\uffb0\047\uffb0\053\uffb0" +
    "\060\uffb0\065\uffb0\066\uffb0\067\uffb0\001\002\000\026\005" +
    "\uffb6\011\uffb6\013\uffb6\021\uffb6\047\uffb6\053\uffb6\060\uffb6" +
    "\065\uffb6\066\uffb6\067\uffb6\001\002\000\026\005\uffaf\011" +
    "\uffaf\013\uffaf\021\uffaf\047\uffaf\053\uffaf\060\uffaf\065\uffaf" +
    "\066\uffaf\067\uffaf\001\002\000\026\005\uffb4\011\uffb4\013" +
    "\uffb4\021\uffb4\047\uffb4\053\uffb4\060\uffb4\065\uffb4\066\uffb4" +
    "\067\uffb4\001\002\000\004\035\112\001\002\000\026\005" +
    "\uffa6\011\uffa6\013\uffa6\021\uffa6\047\uffa6\053\uffa6\060\uffa6" +
    "\065\uffa6\066\uffa6\067\uffa6\001\002\000\042\004\104\005" +
    "\072\006\105\007\107\012\uffc7\013\077\017\074\020\076" +
    "\023\uffc7\025\uffc7\026\101\027\102\030\100\033\uffc7\035" +
    "\111\040\uffc7\001\002\000\026\005\uffa9\011\uffa9\013\uffa9" +
    "\021\uffa9\047\uffa9\053\uffa9\060\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\001\002\000\026\005\uffab\011\uffab\013\uffab\021\uffab" +
    "\047\uffab\053\uffab\060\uffab\065\uffab\066\uffab\067\uffab\001" +
    "\002\000\026\005\uffaa\011\uffaa\013\uffaa\021\uffaa\047\uffaa" +
    "\053\uffaa\060\uffaa\065\uffaa\066\uffaa\067\uffaa\001\002\000" +
    "\026\005\uffa8\011\uffa8\013\uffa8\021\uffa8\047\uffa8\053\uffa8" +
    "\060\uffa8\065\uffa8\066\uffa8\067\uffa8\001\002\000\026\005" +
    "\uffa7\011\uffa7\013\uffa7\021\uffa7\047\uffa7\053\uffa7\060\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\001\002\000\024\033\uffd9\034" +
    "\uffd9\046\uffd9\047\uffd9\051\uffd9\054\uffd9\055\uffd9\057\uffd9" +
    "\065\uffd9\001\002\000\032\004\104\005\072\006\105\007" +
    "\107\012\123\013\077\017\074\020\076\026\101\027\102" +
    "\030\100\035\111\001\002\000\042\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\012\uffc4\013\uffc4\017\uffc4\020\uffc4\023\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\033\uffc4\035\uffc4\040" +
    "\uffc4\001\002\000\004\021\125\001\002\000\042\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\012\uff9d\013\uff9d\017\uff9d\020" +
    "\uff9d\023\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\033\uff9d" +
    "\035\uff9d\040\uff9d\001\002\000\042\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\012\uffc5\013\uffc5\017\uffc5\020\uffc5\023\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\033\uffc5\035\uffc5\040" +
    "\uffc5\001\002\000\024\033\uffd7\034\uffd7\046\uffd7\047\uffd7" +
    "\051\uffd7\054\uffd7\055\uffd7\057\uffd7\065\uffd7\001\002\000" +
    "\004\027\137\001\002\000\026\005\uffd1\011\uffd1\013\uffd1" +
    "\021\uffd1\047\uffd1\053\uffd1\060\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\001\002\000\004\027\136\001\002\000\026\005\065" +
    "\011\061\013\055\021\057\047\043\053\066\060\060\065" +
    "\037\066\063\067\062\001\002\000\032\004\104\005\072" +
    "\006\105\007\107\013\077\017\074\020\076\025\135\026" +
    "\101\027\102\030\100\035\111\001\002\000\024\033\uffdd" +
    "\034\uffdd\046\uffdd\047\uffdd\051\uffdd\054\uffdd\055\uffdd\057" +
    "\uffdd\065\uffdd\001\002\000\026\005\uffcf\011\uffcf\013\uffcf" +
    "\021\uffcf\047\uffcf\053\uffcf\060\uffcf\065\uffcf\066\uffcf\067" +
    "\uffcf\001\002\000\026\005\uffd0\011\uffd0\013\uffd0\021\uffd0" +
    "\047\uffd0\053\uffd0\060\uffd0\065\uffd0\066\uffd0\067\uffd0\001" +
    "\002\000\004\014\141\001\002\000\004\065\154\001\002" +
    "\000\006\012\uffbc\023\143\001\002\000\030\005\065\011" +
    "\061\013\055\014\141\021\057\047\043\053\066\060\060" +
    "\065\037\066\063\067\062\001\002\000\004\012\145\001" +
    "\002\000\042\004\uffcd\005\uffcd\006\uffcd\007\uffcd\012\uffcd" +
    "\013\uffcd\017\uffcd\020\uffcd\023\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\033\uffcd\035\uffcd\040\uffcd\001\002\000\006" +
    "\012\uffbd\023\152\001\002\000\034\004\104\005\072\006" +
    "\105\007\107\012\uffbf\013\077\017\074\020\076\023\uffbf" +
    "\026\101\027\102\030\100\035\111\001\002\000\006\012" +
    "\uffbe\023\uffbe\001\002\000\006\012\uffba\023\uffba\001\002" +
    "\000\030\005\065\011\061\013\055\014\141\021\057\047" +
    "\043\053\066\060\060\065\037\066\063\067\062\001\002" +
    "\000\006\012\uffbb\023\uffbb\001\002\000\004\014\155\001" +
    "\002\000\006\012\uff9e\023\uff9e\001\002\000\004\034\uffdf" +
    "\001\002\000\036\033\uffe0\034\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\051\uffe0\052\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0" +
    "\061\uffe0\064\uffe0\065\uffe0\001\002\000\026\005\065\011" +
    "\061\013\055\021\057\047\043\053\066\060\060\065\037" +
    "\066\063\067\062\001\002\000\032\004\104\005\072\006" +
    "\105\007\107\012\162\013\077\017\074\020\076\026\101" +
    "\027\102\030\100\035\111\001\002\000\004\033\025\001" +
    "\002\000\026\033\uffd2\034\uffd2\046\uffd2\047\uffd2\051\uffd2" +
    "\052\164\054\uffd2\055\uffd2\057\uffd2\065\uffd2\001\002\000" +
    "\004\033\025\001\002\000\024\033\uffdb\034\uffdb\046\uffdb" +
    "\047\uffdb\051\uffdb\054\uffdb\055\uffdb\057\uffdb\065\uffdb\001" +
    "\002\000\024\033\uffd3\034\uffd3\046\uffd3\047\uffd3\051\uffd3" +
    "\054\uffd3\055\uffd3\057\uffd3\065\uffd3\001\002\000\030\005" +
    "\065\011\061\012\uffc0\013\055\021\057\047\043\053\066" +
    "\060\060\065\037\066\063\067\062\001\002\000\034\004" +
    "\104\005\072\006\105\007\107\012\uffc2\013\077\017\074" +
    "\020\076\023\uffc2\026\101\027\102\030\100\035\111\001" +
    "\002\000\004\012\175\001\002\000\006\012\uffc1\023\173" +
    "\001\002\000\026\005\065\011\061\013\055\021\057\047" +
    "\043\053\066\060\060\065\037\066\063\067\062\001\002" +
    "\000\034\004\104\005\072\006\105\007\107\012\uffc3\013" +
    "\077\017\074\020\076\023\uffc3\026\101\027\102\030\100" +
    "\035\111\001\002\000\042\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\012\uffce\013\uffce\017\uffce\020\uffce\023\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\033\uffce\035\uffce\040\uffce\001" +
    "\002\000\004\027\177\001\002\000\026\005\065\011\061" +
    "\013\055\021\057\047\043\053\066\060\060\065\037\066" +
    "\063\067\062\001\002\000\032\004\104\005\072\006\105" +
    "\007\107\013\077\017\074\020\076\023\201\026\101\027" +
    "\102\030\100\035\111\001\002\000\026\005\065\011\061" +
    "\013\055\021\057\047\043\053\066\060\060\065\037\066" +
    "\063\067\062\001\002\000\032\004\104\005\072\006\105" +
    "\007\107\013\077\017\074\020\076\026\101\027\102\030" +
    "\100\033\025\035\111\001\002\000\024\033\uffda\034\uffda" +
    "\046\uffda\047\uffda\051\uffda\054\uffda\055\uffda\057\uffda\065" +
    "\uffda\001\002\000\026\005\065\011\061\013\055\021\057" +
    "\047\043\053\066\060\060\065\037\066\063\067\062\001" +
    "\002\000\032\004\104\005\072\006\105\007\107\013\077" +
    "\017\074\020\076\026\101\027\102\030\100\035\111\040" +
    "\206\001\002\000\042\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\012\uffb7\013\uffb7\017\uffb7\020\uffb7\023\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\033\uffb7\035\uffb7\040\uffb7\001\002" +
    "\000\024\033\uffdc\034\uffdc\046\uffdc\047\uffdc\051\uffdc\054" +
    "\uffdc\055\uffdc\057\uffdc\065\uffdc\001\002\000\006\023\212" +
    "\025\213\001\002\000\006\023\uffe1\025\uffe1\001\002\000" +
    "\004\065\037\001\002\000\030\033\uffe4\034\uffe4\045\015" +
    "\046\uffe4\047\uffe4\051\uffe4\054\uffe4\055\uffe4\056\011\057" +
    "\uffe4\065\uffe4\001\002\000\024\033\uffe3\034\uffe3\046\uffe3" +
    "\047\uffe3\051\uffe3\054\uffe3\055\uffe3\057\uffe3\065\uffe3\001" +
    "\002\000\006\023\uffe2\025\uffe2\001\002\000\010\012\217" +
    "\045\015\056\011\001\002\000\004\033\uffef\001\002\000" +
    "\004\065\037\001\002\000\006\012\227\023\226\001\002" +
    "\000\006\012\224\023\223\001\002\000\006\045\015\056" +
    "\011\001\002\000\004\033\ufff0\001\002\000\006\012\uffeb" +
    "\023\uffeb\001\002\000\006\045\015\056\011\001\002\000" +
    "\004\033\ufff1\001\002\000\006\012\uffea\023\uffea\001\002" +
    "\000\006\012\uffe9\023\uffe9\001\002\000\006\023\243\025" +
    "\ufff9\001\002\000\006\023\240\025\ufff8\001\002\000\012" +
    "\011\uffed\023\ufff5\025\ufff5\037\235\001\002\000\004\066" +
    "\236\001\002\000\004\040\237\001\002\000\006\023\ufff4" +
    "\025\ufff4\001\002\000\004\065\037\001\002\000\010\023" +
    "\ufff5\025\ufff5\037\235\001\002\000\006\023\ufff7\025\ufff7" +
    "\001\002\000\004\065\037\001\002\000\006\023\ufff6\025" +
    "\ufff6\001\002\000\004\011\uffee\001\002\000\004\002\ufffe" +
    "\001\002\000\014\034\252\045\015\056\011\061\017\064" +
    "\013\001\002\000\004\025\251\001\002\000\014\034\ufffa" +
    "\045\ufffa\056\ufffa\061\ufffa\064\ufffa\001\002\000\004\002" +
    "\000\001\002\000\004\065\037\001\002\000\004\033\025" +
    "\001\002\000\014\034\ufff2\045\ufff2\056\ufff2\061\ufff2\064" +
    "\ufff2\001\002\000\004\011\uffed\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\010\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\020\004\021\044\013\047\015\050\022\053\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\020\004\253\053\252\001\001\000\002\001" +
    "\001\000\014\003\020\004\021\044\246\050\247\053\017" +
    "\001\001\000\004\046\244\001\001\000\010\046\233\051" +
    "\232\052\231\001\001\000\002\001\001\000\004\011\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\035" +
    "\027\042\030\053\026\001\001\000\002\001\001\000\006" +
    "\036\207\046\210\001\001\000\002\001\001\000\022\002" +
    "\041\011\035\015\031\024\034\025\044\037\043\043\040" +
    "\046\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\041\011\035\015\031\024\034\025\044\037\155" +
    "\046\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\132\001\001\000\002\001\001\000\024\013\063" +
    "\015\051\016\053\024\034\025\052\033\067\034\066\041" +
    "\055\046\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\026\102\027" +
    "\105\030\072\031\107\032\074\001\001\000\022\015\051" +
    "\016\125\024\034\025\052\033\067\034\066\041\055\046" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\051\016\121\024\034\025\052\033" +
    "\067\034\066\041\055\046\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\051\016" +
    "\070\024\034\025\052\033\067\034\066\041\055\046\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\026\102\027\105\030\072\031\107\032\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\051\016\112\024\034\025\052\033\067\034\066" +
    "\041\055\046\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\026\102\027" +
    "\105\030\072\031\107\032\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\026\102\027\105" +
    "\030\072\031\107\032\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\026\102\027\105" +
    "\030\072\031\107\032\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\051\016\133\024\034\025\052\033\067\034\066\041" +
    "\055\046\032\001\001\000\014\026\102\027\105\030\072" +
    "\031\107\032\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\141\001\001\000\002" +
    "\001\001\000\004\022\143\001\001\000\030\015\051\016" +
    "\146\021\150\023\145\024\034\025\052\033\067\034\066" +
    "\040\147\041\055\046\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\026\102\027\105" +
    "\030\072\031\107\032\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\051\016\146\021\152\024\034" +
    "\025\052\033\067\034\066\040\147\041\055\046\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\051\016" +
    "\160\024\034\025\052\033\067\034\066\041\055\046\032" +
    "\001\001\000\014\026\102\027\105\030\072\031\107\032" +
    "\074\001\001\000\004\011\162\001\001\000\004\012\164" +
    "\001\001\000\004\011\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\051\016\167\017\171\020\170" +
    "\024\034\025\052\033\067\034\066\041\055\046\032\001" +
    "\001\000\014\026\102\027\105\030\072\031\107\032\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\051\016\173\024\034\025\052\033\067\034\066\041\055" +
    "\046\032\001\001\000\014\026\102\027\105\030\072\031" +
    "\107\032\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\051\016\177\024\034\025\052\033\067\034" +
    "\066\041\055\046\032\001\001\000\014\026\102\027\105" +
    "\030\072\031\107\032\074\001\001\000\022\015\051\016" +
    "\201\024\034\025\052\033\067\034\066\041\055\046\032" +
    "\001\001\000\016\011\202\026\102\027\105\030\072\031" +
    "\107\032\074\001\001\000\002\001\001\000\022\015\051" +
    "\016\204\024\034\025\052\033\067\034\066\041\055\046" +
    "\032\001\001\000\014\026\102\027\105\030\072\031\107" +
    "\032\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\214\001\001" +
    "\000\006\035\213\053\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\221\006\220\053\217\001\001" +
    "\000\002\001\001\000\004\046\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\224\053\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\227\053" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\046\240\051\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\240\051\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\020\004\253\053\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\255\001\001\000" +
    "\004\011\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo padre;
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico

    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
        FileWriter fichero = null;
        PrintWriter pw = null;
        try
        {
            fichero = new FileWriter("D:\\Sexto Semestre\\Compiladores\\Compiler\\src\\scanner\\salida.txt");
            pw = new PrintWriter(fichero);
            pw.println("Error Sintactio Recuperado "+lexema+" Linea "+fila+" Columna "+columna);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        };
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
    }
    
    public ArrayList<String> Gramaticas = new ArrayList<String>();
    public void enlistar(String argumento){
        Gramaticas.add(argumento);
    }

    Integer contador=0;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= CLASS PROGRAM LLAV field_declm method_declm LLAC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		enlistar("Programa parseado completamente "+contador+""); 
            contador++;
            Nodo n1= new Nodo("Program",contador);
            n1.addHijo(a);
            n1.addHijo(b);
            padre=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("program",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= CLASS PROGRAM LLAV method_declm LLAC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		enlistar("Programa parseado completamente "+contador+""); 
            contador++;
            Nodo n1= new Nodo("Program",contador);
            n1.addHijo(a);
            padre=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("program",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= CLASS PROGRAM LLAV field_declm LLAC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		enlistar("Programa parseado completamente "+contador+""); 
            contador++;
            Nodo n1= new Nodo("Program",contador);
            n1.addHijo(a);
            padre=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("program",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= CLASS PROGRAM LLAV LLAC 
            {
              Nodo RESULT =null;
		enlistar("Programa parseado completamente "+contador+""); 
            contador++;
            Nodo n1= new Nodo("Program",contador);
            padre=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("program",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= error 
            {
              Nodo RESULT =null;
		 enlistar("Error sintactico en el programa"); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("program",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_declm ::= field_decl PC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
            enlistar("field_declm");
            contador++;
            Nodo n1 = new Nodo("field_decl",contador);
            n1.addHijo(a);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_declm",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_declm ::= field_declm field_decl PC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
            enlistar("field_declm");
            contador++;
            a.addHijo(b);
            RESULT=a;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_declm",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl ::= type field_decl3 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            Nodo n1 = new Nodo("type",contador);
            n1.addHijo(a);
            b.addHijo(n1);
            RESULT=b;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_decl ::= type field_decl2 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            Nodo n1 = new Nodo("field_declm",contador);
            Nodo n2 = new Nodo("type",contador);
            n2.addHijo(a);
            n1.addHijo(b);
            n1.addHijo(n2);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_decl3 ::= field_decl2 COMMA field_decl2 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            Nodo n1 = new Nodo("field_declm",contador);
            n1.addHijo(a);
            n1.addHijo(b);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl3",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field_decl3 ::= field_decl3 COMMA field_decl2 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            a.addHijo(b);
            RESULT=a;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl3",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // field_decl2 ::= id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		enlistar("entra en field_decl2 id");
            contador++;
            Nodo n1 = new Nodo("id",contador);
            n1.addHijo(a);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl2",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // field_decl2 ::= id CORC NUM CORD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
            contador++;
            Nodo n1= new Nodo("id[int_literal]",contador);
            Nodo n2 = new Nodo("id",contador);
            contador++;
            Nodo n3 = new Nodo("int_literal",contador);
            Nodo n4= new Nodo(b.toString(),contador);
            n2.addHijo(a);
            n3.addHijo(n4);
            n1.addHijo(n2);
            n1.addHijo(n3);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("field_decl2",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_declm ::= method_decl2 block 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            Nodo n1= new Nodo("method_decl",contador);
            a.addHijo(b);
            n1.addHijo(a);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_declm",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_declm ::= method_declm method_decl2 block 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            b.addHijo(c);
            a.addHijo(b);
            RESULT=a;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_declm",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_decl2 ::= method_decl PARA method_decl4 PARC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
            contador++;
            a.addHijo(b);
            RESULT=a;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl2",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_decl2 ::= method_decl PARA method_decl3 PARC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
            contador++;
            Nodo n1 = new Nodo("type_id",contador);
            n1.addHijo(b);
            a.addHijo(n1);
            RESULT=a;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl2",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_decl2 ::= method_decl PARA PARC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		
            contador++;
            RESULT=a;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl2",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_decl ::= VOID id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            Nodo n1 = new Nodo("method_declm",contador);
            Nodo n2= new Nodo("VOID",contador);    
            Nodo n3 = new Nodo("id",contador);
            Nodo n4= new Nodo("type",contador);
            n4.addHijo(n2);
            n3.addHijo(a);
            n1.addHijo(n4);
            n1.addHijo(n3);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_decl ::= type id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		enlistar("entra en type id method_decl");
            contador++;
            Nodo n1 = new Nodo("method_declm",contador);
            Nodo n2= new Nodo("type",contador);    
            Nodo n3 = new Nodo("id",contador);
            n2.addHijo(a);
            n3.addHijo(b);
            n1.addHijo(n2);
            n1.addHijo(n3);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_decl ::= MAIN 
            {
              Nodo RESULT =null;
		
            contador++;
            Nodo n1 = new Nodo("method_declm",contador);
            Nodo n2= new Nodo("type",contador);    
            Nodo n3 = new Nodo("id",contador);
            Nodo n4 = new Nodo("main",contador);
            contador++;
            Nodo n5 = new Nodo("main",contador);
            n2.addHijo(n4);
            n3.addHijo(n5);
            n1.addHijo(n2);
            n1.addHijo(n3);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method_decl4 ::= method_decl3 COMMA method_decl3 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            Nodo n1 = new Nodo("type_id",contador);
            n1.addHijo(a);
            n1.addHijo(b);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl4",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_decl4 ::= method_decl4 COMMA method_decl3 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            a.addHijo(b);
            RESULT=a;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl4",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method_decl3 ::= type id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		enlistar("entra en type id method_decl3");
            contador++;
            Nodo n1 = new Nodo("type_ids",contador);
            contador++;
            Nodo n2 = new Nodo("id",contador);
            contador++;
            Nodo n3 = new Nodo("type",contador);
            n2.addHijo(b);
            n3.addHijo(a);
            n1.addHijo(n3);
            n1.addHijo(n2);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_decl3",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= INT 
            {
              Nodo RESULT =null;
		 enlistar("INT "+contador+""); contador++;  
                Nodo n1 = new Nodo("INT",contador);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("type",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= BOOLEAN 
            {
              Nodo RESULT =null;
		 enlistar("BOOLEAN "+contador+""); contador++; 
                Nodo n1 = new Nodo("BOOL",contador);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("type",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_declm ::= var_decl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("var declaration "+contador+"");contador++; 
                RESULT=a;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_declm",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_declm ::= 
            {
              Nodo RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_declm",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_decl ::= type var_decl2 PC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
            contador++;
            Nodo n1 = new Nodo("var_decl",contador);
            Nodo n2 = new Nodo("type",contador);
            n2.addHijo(a);
            b.addHijo(n2);
            n1.addHijo(b);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_decl",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_decl ::= type var_decl2 PC var_decl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            Nodo n2 = new Nodo("type",contador);
            n2.addHijo(a);
            b.addHijo(n2);
            c.addHijo(b);
            RESULT=c;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_decl",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_decl2 ::= var_decl2 COMMA id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                contador++;
                Nodo n1 = new Nodo("id",contador);
                n1.addHijo(b);
                a.addHijo(n1);
                RESULT=a;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_decl2",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_decl2 ::= id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                contador++;
                Nodo n1 = new Nodo("var_declm",contador);
                Nodo n2 = new Nodo("id",contador);
                n2.addHijo(a);
                n1.addHijo(n2);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("var_decl2",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // block ::= LLAV var_declm statement_mm LLAC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 enlistar("block "+contador+""); contador++;
             Nodo n1 = new Nodo("block",contador);
             if(a!=null){
                n1.addHijo(a);}
             if(b!=null){
                n1.addHijo(b);}
             RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("block",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_m ::= statement statement_m 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                b.addHijo(a);
                RESULT=b;
                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement_m",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_m ::= statement 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                Nodo n1 = new Nodo("statement",contador);
                n1.addHijo(a);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement_m",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= location assign_op expr PC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 enlistar("location assign expr "+contador+"");contador++; 
                Nodo n1 = new Nodo("location_assign_expr",contador);
                n1.addHijo(a);
                n1.addHijo(b);
                n1.addHijo(c);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= method_call PC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 enlistar("method_call "+contador+"");contador++; 
                
                RESULT=a;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= IF PARA expr PARC block else_blockm 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("if "+contador+"");contador++; 
                Nodo n1 = new Nodo("if_statement",contador);
                Nodo n2 = new Nodo("if",contador);
                n1.addHijo(n2);
                n1.addHijo(a);
                n1.addHijo(b);
                if(c!=null){
                n1.addHijo(c);}
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= FOR id EQUAL expr COMMA expr block 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("for "+contador+"");contador++; 
                Nodo n1 = new Nodo("for_statementm",contador);
                Nodo n2 = new Nodo("for",contador);
                Nodo n3 = new Nodo("igual",contador);
                Nodo n4 = new Nodo("id",contador);
                n4.addHijo(a);
                n1.addHijo(n2);
                n1.addHijo(n4);
                n1.addHijo(n3);
                n1.addHijo(b);
                n1.addHijo(c);
                n1.addHijo(d);
                RESULT=n1;
                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= RETURN exprm PC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 enlistar("return "+contador+"");contador++; 
                Nodo n1 = new Nodo("return_expr",contador);
                Nodo n2 = new Nodo("return",contador);
                n1.addHijo(n2);
                if(a!=null){
                n1.addHijo(a);}
                
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= BREAK PC 
            {
              Nodo RESULT =null;
		 enlistar("break "+contador+"");contador++; 
                Nodo n1 = new Nodo("break_statementm",contador);
                Nodo n2 = new Nodo("break",contador);
                n1.addHijo(n2);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= CONTINUE PC 
            {
              Nodo RESULT =null;
		 enlistar("continue "+contador+"");contador++; 
                Nodo n1 = new Nodo("continue_statementm",contador);
                Nodo n2 = new Nodo("continue",contador);
                n1.addHijo(n2);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= block 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("block "+contador+"");contador++; 
                RESULT=a;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement_mm ::= statement_m 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement_mm",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_mm ::= 
            {
              Nodo RESULT =null;
		RESULT=null;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("statement_mm",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // else_blockm ::= ELSE block 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("else "+contador+"");contador++; 
                Nodo n1 = new Nodo("else_block",contador);
                n1.addHijo(a);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("else_blockm",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else_blockm ::= 
            {
              Nodo RESULT =null;
		RESULT=null;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("else_blockm",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assign_op ::= EQUAL 
            {
              Nodo RESULT =null;
		 enlistar("= "+contador+"");contador++; 
                Nodo n1 = new Nodo("assign_op",contador);
                Nodo n2 = new Nodo("igual",contador);
                n1.addHijo(n2);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("assign_op",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign_op ::= PLUS EQUAL 
            {
              Nodo RESULT =null;
		 enlistar("+= "+contador+"");contador++; 
                Nodo n1 = new Nodo("assign_op",contador);
                Nodo n2 = new Nodo("mas_igual",contador);
                n1.addHijo(n2);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("assign_op",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assign_op ::= MINUS EQUAL 
            {
              Nodo RESULT =null;
		 enlistar("-= "+contador+"");contador++; 
                Nodo n1 = new Nodo("assign_op",contador);
                Nodo n2 = new Nodo("menos_igual",contador);
                n1.addHijo(n2);
                RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("assign_op",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // method_call ::= method_name PARA expr3 PARC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 contador++;
            Nodo n1 = new Nodo("method_call",contador);
            n1.addHijo(a);
            if(b!=null){
            n1.addHijo(b);}
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_call ::= CALLOUT PARA string_literal callout_argm PARC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 enlistar("method_call "+contador+"");contador++; 
            Nodo n1 = new Nodo("method_call",contador);
            Nodo n2 = new Nodo("callout",contador);
            n1.addHijo(n2);
            n1.addHijo(a);
            if(b!=null){
                n1.addHijo(b);}
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exprm ::= expr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("expr "+contador+"");contador++; 
            RESULT=a;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("exprm",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exprm ::= 
            {
              Nodo RESULT =null;
		RESULT=null;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("exprm",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= location 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("location "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= method_call 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("method_call "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr bin_op expr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("expr bin_op expr "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            n1.addHijo(a);
            n1.addHijo(b);
            n1.addHijo(c);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= MINUS expr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("- expr "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            Nodo n2 = new Nodo("menos",contador);
            n1.addHijo(n2); 
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= EXCLA expr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("! expr "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            Nodo n2 = new Nodo("excla",contador);
            n1.addHijo(n2); 
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= PARA expr PARC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 enlistar("( expr ) "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            Nodo n2 = new Nodo("para_expr_para",contador);
            n1.addHijo(n2); 
            n2.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr2 ::= expr2 COMMA expr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            a.addHijo(b);
            RESULT=a;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr2 ::= expr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            contador++;
            Nodo n1 = new Nodo("exprm",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr3 ::= expr2 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
            RESULT=a;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr3 ::= 
            {
              Nodo RESULT =null;
		RESULT=null;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // callout_arg ::= expr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("callout expr "+contador+"");contador++; 
            Nodo n1 = new Nodo("callout_arg",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_arg",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // callout_arg ::= string_literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("callout string_literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("callout_arg",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_arg",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // callout_argm ::= COMMA callout_arg2 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("callout argument "+contador+""); 
            RESULT=a;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_argm",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // callout_argm ::= 
            {
              Nodo RESULT =null;
		RESULT=null;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_argm",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // callout_arg2 ::= callout_arg2 COMMA callout_arg 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		contador++;
            a.addHijo(b);
            RESULT=a;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_arg2",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // callout_arg2 ::= callout_arg 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		contador++;
            Nodo n1 = new Nodo("callout_argm",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("callout_arg2",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // method_name ::= id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar(""+a+" "+contador+"");contador++; 
            Nodo n1 = new Nodo("method_name",contador);
            Nodo n2 = new Nodo("id",contador);
            n2.addHijo(a);
            n1.addHijo(n2);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("method_name",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // location ::= id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("location"); 
            contador++;
            Nodo n1 = new Nodo("location",contador);
            Nodo n2 = new Nodo("id",contador);
            n2.addHijo(a);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("location",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // location ::= id CORC expr CORD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 enlistar("id[expr] "+contador+"");contador++; 
            Nodo n1 = new Nodo("location",contador);
            Nodo n2 = new Nodo("id[expr]",contador);
            Nodo n3 = new Nodo("id",contador);
            n3.addHijo(a);
            n2.addHijo(n3);
            n2.addHijo(b);
            n1.addHijo(n2);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("location",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bin_op ::= arith_op 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("arith_op "+contador+"");contador++; 
            Nodo n1 = new Nodo("bin_op",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bin_op",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bin_op ::= rel_op 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("rel_op "+contador+"");contador++; 
            Nodo n1 = new Nodo("bin_op",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bin_op",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bin_op ::= eq_op 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("eq_op "+contador+"");contador++; 
            Nodo n1 = new Nodo("bin_op",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bin_op",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bin_op ::= cond_op 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("cond_op "+contador+"");contador++; 
            Nodo n1 = new Nodo("bin_op",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bin_op",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arith_op ::= PLUS 
            {
              Nodo RESULT =null;
		 enlistar("+ "+contador+"");contador++; 
            Nodo n1 = new Nodo("arith_op",contador);
            Nodo n2 = new Nodo("mas",contador);
            n1.addHijo(n2);
            RESULT=n1;
            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("arith_op",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arith_op ::= MINUS 
            {
              Nodo RESULT =null;
		 enlistar("- "+contador+"");contador++; 
            Nodo n1 = new Nodo("arith_op",contador);
            Nodo n2 = new Nodo("menos",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("arith_op",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arith_op ::= MORE 
            {
              Nodo RESULT =null;
		 enlistar("* "+contador+"");contador++; 
            Nodo n1 = new Nodo("arith_op",contador);
            Nodo n2 = new Nodo("multi",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("arith_op",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arith_op ::= DIV 
            {
              Nodo RESULT =null;
		 enlistar("/ "+contador+"");contador++; 
            Nodo n1 = new Nodo("arith_op",contador);
            Nodo n2 = new Nodo("div",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("arith_op",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arith_op ::= PERCENT 
            {
              Nodo RESULT =null;
		 enlistar("% "+contador+"");contador++; 
            Nodo n1 = new Nodo("arith_op",contador);
            Nodo n2 = new Nodo("percent",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("arith_op",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // rel_op ::= MINUS2 
            {
              Nodo RESULT =null;
		 enlistar("< "+contador+"");contador++; 
            Nodo n1 = new Nodo("rel_op",contador);
            Nodo n2 = new Nodo("menor",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("rel_op",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // rel_op ::= MINUS3 
            {
              Nodo RESULT =null;
		 enlistar("> "+contador+"");contador++;
            Nodo n1 = new Nodo("rel_op",contador);
            Nodo n2 = new Nodo("mayor",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("rel_op",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // rel_op ::= MINUS2 EQUAL 
            {
              Nodo RESULT =null;
		 enlistar("<= "+contador+"");contador++; 
            Nodo n1 = new Nodo("rel_op",contador);
            Nodo n2 = new Nodo("menor_igual",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("rel_op",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // rel_op ::= MINUS3 EQUAL 
            {
              Nodo RESULT =null;
		 enlistar(">= "+contador+"");contador++; 
            Nodo n1 = new Nodo("rel_op",contador);
            Nodo n2 = new Nodo("mayor_igual",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("rel_op",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // eq_op ::= EQUAL EQUAL 
            {
              Nodo RESULT =null;
		 enlistar("== "+contador+"");contador++; 
            Nodo n1 = new Nodo("eq_op",contador);
            Nodo n2 = new Nodo("igual igual",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("eq_op",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // eq_op ::= EXCLA EQUAL 
            {
              Nodo RESULT =null;
		 enlistar("!= "+contador+"");contador++; 
            Nodo n1 = new Nodo("eq_op",contador);
            Nodo n2 = new Nodo("exla igual",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("eq_op",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cond_op ::= CAFE CAFE 
            {
              Nodo RESULT =null;
		 enlistar("&& "+contador+"");contador++; 
            Nodo n1 = new Nodo("cond_op",contador);
            Nodo n2 = new Nodo("cafe_cafe",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("cond_op",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cond_op ::= OR OR 
            {
              Nodo RESULT =null;
		 enlistar("|| "+contador+"");contador++; 
            Nodo n1 = new Nodo("cond_op",contador);
            Nodo n2 = new Nodo("or_or",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("cond_op",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar(""+a+ " "+contador+"");contador++; 
            Nodo n1 = new Nodo("literal",contador);
            Nodo n2 = new Nodo("int_literal",contador);
            Nodo n3 = new Nodo(a.toString(),contador);
            n2.addHijo(n3);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= bool_literal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("bool literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("literal",contador);
            n1.addHijo(a);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= char_literal 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar("char literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("literal",contador);
            n1.addHijo(b);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= HEX 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 enlistar(""+a+ " "+contador+"");contador++; 
            Nodo n1 = new Nodo("literal",contador);
            Nodo n2 = new Nodo("int_literal",contador);
            Nodo n3 = new Nodo(a.toString(),contador);
            n2.addHijo(n3);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bool_literal ::= TRUE 
            {
              Nodo RESULT =null;
		 enlistar("TRUE "+contador+"");contador++; 
            Nodo n1 = new Nodo("bool_literal",contador);
            Nodo n2 = new Nodo("true",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bool_literal",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bool_literal ::= FALSE 
            {
              Nodo RESULT =null;
		 enlistar("FALSE "+contador+"");contador++; 
            Nodo n1 = new Nodo("bool_literal",contador);
            Nodo n2 = new Nodo("false",contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bool_literal",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // id ::= alpha_num 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		  enlistar(""+a+" "+contador+"");contador++; 
        Nodo n1 = new Nodo(a.toString(),contador);
        RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("id",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // string_literal ::= QUOTE alpha_num QUOTE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 enlistar("string_literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("string_literal",contador);
            Nodo n2 = new Nodo(a.toString(),contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("string_literal",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // char_literal ::= SINGLEQUOTE alpha_num SINGLEQUOTE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 enlistar("char literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("char_literal",contador);
            Nodo n2 = new Nodo(a.toString(),contador);
            n1.addHijo(n2);
            RESULT=n1;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("char_literal",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
