/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package parser;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import scanner.TError;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import ast.Nodo;
    
//------> Codigo para el parser,variables, metodos
parser code
{:
    public Nodo padre;
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico

    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
        FileWriter fichero = null;
        PrintWriter pw = null;
        try
        {
            fichero = new FileWriter("D:\\Sexto Semestre\\Compiladores\\Compiler\\src\\scanner\\salida.txt");
            pw = new PrintWriter(fichero);
            pw.println("Error Sintactio Recuperado "+lexema+" Linea "+fila+" Columna "+columna);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        };
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
    }
    
    public ArrayList<String> Gramaticas = new ArrayList<String>();
    public void enlistar(String argumento){
        Gramaticas.add(argumento);
    }

    Integer contador=0;
:}

//------> Codigo para las acciones gramaticales
action code
{:
:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales 
terminal PLUS,MINUS,MORE,DIV,COMMENT,PARA,PARC,EXCLA,QUOTE,NUMERAL,DOLAR,
PERCENT,CAFE,SINGLEQUOTE,POINT,COMMA,DPOINT,PC,MINUS2,EQUAL,MINUS3,
INTER,TILD,LLAV,LLAC,OR,EQUALS,CORC,CORD,DIAGO,EXP,FLOOR,SPACE,BOOLEAN,BREAK,CALLOUT,CLASS,CONTINUE,ELSE,FALSE,FOR,IF,INT,RETURN,TRUE,VOID;
terminal Integer ALPHA,PROGRAM,MAIN;
terminal String alpha_num,NUM;



//------> declaracion de no terminales
non terminal Nodo statement,method_decl,method_decl2,method_decl3,method_decl4,method_decl5,
program;
non terminal Nodo block,else_blockm,exprm,assign_op,method_call,expr,expr2,expr3,callout_arg,callout_argm,callout_arg2,method_name,location,
bin_op,arith_op,rel_op,eq_op,cond_op,literal,bool_literal,var_decl,var_decl2, statement_m,string_literal,char_literal,var_declm,
statement_mm,method_declm,main_method;

non terminal Nodo id,field_declm,field_decl,field_decl2,field_decl3,type;

precedence left PLUS,MINUS, PARC;
precedence left MORE, DIV, PERCENT;
precedence left MINUS2, MINUS3, EQUAL, CAFE, OR, EXCLA;
precedence left PARC,COMMA, NUM;
precedence left INT,BOOLEAN,PARA;

start with program;
program::=CLASS PROGRAM LLAV main_method field_declm:a method_declm:b LLAC {:enlistar("Programa parseado completamente "+contador+""); 
            contador++;
            Nodo n1= new Nodo("Program",contador);
            n1.addHijo(a);
            n1.addHijo(b);
            padre=n1;
            :}  
        | CLASS PROGRAM LLAV main_method method_declm:a LLAC {:enlistar("Programa parseado completamente "+contador+""); 
            contador++;
            Nodo n1= new Nodo("Program",contador);
            n1.addHijo(a);
            padre=n1;
            :}
        |CLASS PROGRAM LLAV main_method field_declm:a LLAC {:enlistar("Programa parseado completamente "+contador+""); 
            contador++;
            Nodo n1= new Nodo("Program",contador);
            n1.addHijo(a);
            padre=n1;
            :}
        |CLASS PROGRAM LLAV main_method LLAC {:enlistar("Programa parseado completamente "+contador+""); 
            contador++;
            Nodo n1= new Nodo("Program",contador);
            padre=n1;
            :}
        | error {: enlistar("Error sintactico en el programa"); :};

field_declm::=field_decl:a PC {:
            enlistar("field_declm");
            contador++;
            Nodo n1 = new Nodo("field_decl",contador);
            n1.addHijo(a);
            RESULT=n1;
            :}
        |field_declm:a field_decl:b PC{:
            enlistar("field_declm");
            contador++;
            a.addHijo(b);
            RESULT=a;
            :};
field_decl::=type:a field_decl3:b  {:
            contador++;
            Nodo n1 = new Nodo("type",contador);
            n1.addHijo(a);
            b.addHijo(n1);
            RESULT=b;
            :}
        | type:a field_decl2:b {:
            contador++;
            Nodo n1 = new Nodo("field_declm",contador);
            Nodo n2 = new Nodo("type",contador);
            n2.addHijo(a);
            n1.addHijo(b);
            n1.addHijo(n2);
            RESULT=n1;
            :};
field_decl3::=field_decl2:a COMMA field_decl2:b {:
            contador++;
            Nodo n1 = new Nodo("field_declm",contador);
            n1.addHijo(a);
            n1.addHijo(b);
            RESULT=n1;
            :}
        | field_decl3:a COMMA field_decl2:b{:
            contador++;
            a.addHijo(b);
            RESULT=a;
            :};
field_decl2::=id:a {:enlistar("entra en field_decl2 id");
            contador++;
            Nodo n1 = new Nodo("id",contador);
            n1.addHijo(a);
            RESULT=n1;
            :}
        | id:a CORC NUM:b CORD {:
            contador++;
            Nodo n1= new Nodo("id[int_literal]",contador);
            Nodo n2 = new Nodo("id",contador);
            contador++;
            Nodo n3 = new Nodo("int_literal",contador);
            Nodo n4= new Nodo(b.toString(),contador);
            n2.addHijo(a);
            n3.addHijo(n4);
            n1.addHijo(n2);
            n1.addHijo(n3);
            RESULT=n1;
            :};

method_declm::=method_decl2:a block:b {:
            contador++;
            Nodo n1= new Nodo("method_decl",contador);
            a.addHijo(b);
            n1.addHijo(a);
            RESULT=n1;
            :}
        | method_declm:a method_decl2:b block:c {:
            contador++;
            b.addHijo(c);
            a.addHijo(b);
            RESULT=a;
            :};
method_decl2::=method_decl:a PARA method_decl4:b PARC {:
            contador++;
            a.addHijo(b);
            RESULT=a;
            :}
        | method_decl:a PARA method_decl3:b PARC {:
            contador++;
            Nodo n1 = new Nodo("type_id",contador);
            n1.addHijo(b);
            a.addHijo(n1);
            RESULT=a;
            :};
method_decl::=VOID id:a {:
            contador++;
            Nodo n1 = new Nodo("method_declm",contador);
            Nodo n2= new Nodo("VOID",contador);    
            Nodo n3 = new Nodo("id",contador);
            Nodo n4= new Nodo("type",contador);
            n4.addHijo(n2);
            n3.addHijo(a);
            n1.addHijo(n4);
            n1.addHijo(n3);
            RESULT=n1;
            :}
        | type:a id:b {:enlistar("entra en type id method_decl");
            contador++;
            Nodo n1 = new Nodo("method_declm",contador);
            Nodo n2= new Nodo("type",contador);    
            Nodo n3 = new Nodo("id",contador);
            n2.addHijo(a);
            n3.addHijo(b);
            n1.addHijo(n2);
            n1.addHijo(n3);
            RESULT=n1;
            :};
method_decl4::= method_decl3:a COMMA method_decl3:b {:
            contador++;
            Nodo n1 = new Nodo("type_id",contador);
            n1.addHijo(a);
            n1.addHijo(b);
            RESULT=n1;
            :}
        |method_decl4:a COMMA method_decl3:b{:
            contador++;
            a.addHijo(b);
            RESULT=a;
            :};
method_decl3::=type:a id:b {:enlistar("entra en type id method_decl3");
            contador++;
            Nodo n1 = new Nodo("type_ids",contador);
            contador++;
            Nodo n2 = new Nodo("id",contador);
            contador++;
            Nodo n3 = new Nodo("type",contador);
            n2.addHijo(b);
            n3.addHijo(a);
            n1.addHijo(n3);
            n1.addHijo(n2);
            RESULT=n1;
            :};

main_method::= MAIN PARA PARC LLAV LLAC {: enlistar("main method "+contador+""); contador++; :};



type::= INT {: enlistar("INT "+contador+""); contador++;  
                Nodo n1 = new Nodo("INT",contador);
                RESULT=n1;:}
            | BOOLEAN {: enlistar("BOOLEAN "+contador+""); contador++; 
                Nodo n1 = new Nodo("BOOL",contador);
                RESULT=n1;:};

var_declm::=var_decl:a {: enlistar("var declaration "+contador+"");contador++; 
                RESULT=a;:}
            | ;
var_decl::=type:a var_decl2:b PC {:
            contador++;
            Nodo n1 = new Nodo("var_decl",contador);
            Nodo n2 = new Nodo("type",contador);
            n2.addHijo(a);
            b.addHijo(n2);
            n1.addHijo(b);
            RESULT=n1;
            :}
        | type:a var_decl2:b PC var_decl:c {:
            contador++;
            Nodo n2 = new Nodo("type",contador);
            n2.addHijo(a);
            b.addHijo(n2);
            c.addHijo(b);
            RESULT=c;
            :};
var_decl2::=var_decl2:a COMMA id:b {:
                contador++;
                Nodo n1 = new Nodo("id",contador);
                n1.addHijo(b);
                a.addHijo(n1);
                RESULT=a;:}
            | id:a {:
                contador++;
                Nodo n1 = new Nodo("var_declm",contador);
                Nodo n2 = new Nodo("id",contador);
                n2.addHijo(a);
                n1.addHijo(n2);
                RESULT=n1;:};


block::= LLAV var_declm:a statement_mm:b LLAC {: enlistar("block "+contador+""); contador++;
             Nodo n1 = new Nodo("block",contador);
             if(a!=null){
                n1.addHijo(a);}
             if(b!=null){
                n1.addHijo(b);}
             RESULT=n1;:};
             


statement_m::=statement:a statement_m:b {:
                b.addHijo(a);
                RESULT=b;
                :}
            | statement:a {:
                Nodo n1 = new Nodo("statement",contador);
                n1.addHijo(a);
                RESULT=n1;:};
statement::=location:a assign_op:b expr:c PC {: enlistar("location assign expr "+contador+"");contador++; 
                Nodo n1 = new Nodo("location_assign_expr",contador);
                n1.addHijo(a);
                n1.addHijo(b);
                n1.addHijo(c);
                RESULT=n1;:}
            | method_call:a PC {: enlistar("method_call "+contador+"");contador++; 
                
                RESULT=a;:}
            | IF PARA expr:a PARC block:b else_blockm:c {: enlistar("if "+contador+"");contador++; 
                Nodo n1 = new Nodo("if_statement",contador);
                Nodo n2 = new Nodo("if",contador);
                n1.addHijo(n2);
                n1.addHijo(a);
                n1.addHijo(b);
                if(c!=null){
                n1.addHijo(c);}
                RESULT=n1;:}
            | FOR id:a EQUAL expr:b COMMA expr:c block:d {: enlistar("for "+contador+"");contador++; 
                Nodo n1 = new Nodo("for_statementm",contador);
                Nodo n2 = new Nodo("for",contador);
                Nodo n3 = new Nodo("igual",contador);
                Nodo n4 = new Nodo("id",contador);
                n4.addHijo(a);
                n1.addHijo(n2);
                n1.addHijo(n4);
                n1.addHijo(n3);
                n1.addHijo(b);
                n1.addHijo(c);
                n1.addHijo(d);
                RESULT=n1;
                :}
            | RETURN exprm:a PC {: enlistar("return "+contador+"");contador++; 
                Nodo n1 = new Nodo("return_expr",contador);
                Nodo n2 = new Nodo("return",contador);
                n1.addHijo(n2);
                if(a!=null){
                n1.addHijo(a);}
                
                RESULT=n1;:}
            | BREAK PC {: enlistar("break "+contador+"");contador++; 
                Nodo n1 = new Nodo("break_statementm",contador);
                Nodo n2 = new Nodo("break",contador);
                n1.addHijo(n2);
                RESULT=n1;:}
            | CONTINUE PC {: enlistar("continue "+contador+"");contador++; 
                Nodo n1 = new Nodo("continue_statementm",contador);
                Nodo n2 = new Nodo("continue",contador);
                n1.addHijo(n2);
                RESULT=n1;:}
            | block:a {: enlistar("block "+contador+"");contador++; 
                RESULT=a;:};
statement_mm::=statement_m:a {:RESULT=a;:}
                | {:RESULT=null;:};

else_blockm::=ELSE block:a {: enlistar("else "+contador+"");contador++; 
                Nodo n1 = new Nodo("else_block",contador);
                n1.addHijo(a);
                RESULT=n1;:}
            | {:RESULT=null;:};

assign_op::=EQUAL {: enlistar("= "+contador+"");contador++; 
                Nodo n1 = new Nodo("assign_op",contador);
                Nodo n2 = new Nodo("igual",contador);
                n1.addHijo(n2);
                RESULT=n1;:}
            | PLUS EQUAL  {: enlistar("+= "+contador+"");contador++; 
                Nodo n1 = new Nodo("assign_op",contador);
                Nodo n2 = new Nodo("mas_igual",contador);
                n1.addHijo(n2);
                RESULT=n1;:}
            | MINUS EQUAL {: enlistar("-= "+contador+"");contador++; 
                Nodo n1 = new Nodo("assign_op",contador);
                Nodo n2 = new Nodo("menos_igual",contador);
                n1.addHijo(n2);
                RESULT=n1;:};

method_call ::= method_name:a PARA expr3:b PARC {: contador++;
            Nodo n1 = new Nodo("method_call",contador);
            n1.addHijo(a);
            if(b!=null){
            n1.addHijo(b);}
            RESULT=n1;:}
        | CALLOUT PARA string_literal:a callout_argm:b PARC {: enlistar("method_call "+contador+"");contador++; 
            Nodo n1 = new Nodo("method_call",contador);
            Nodo n2 = new Nodo("callout",contador);
            n1.addHijo(n2);
            n1.addHijo(a);
            if(b!=null){
                n1.addHijo(b);}
            RESULT=n1;
            :};

exprm::=expr:a {: enlistar("expr "+contador+"");contador++; 
            RESULT=a;:}
        | {:RESULT=null;:};
expr::= location:a {: enlistar("location "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            n1.addHijo(a);
            RESULT=n1;:}
        | method_call:a {: enlistar("method_call "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            n1.addHijo(a);
            RESULT=n1;:}
        | literal:a {: enlistar("literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            n1.addHijo(a);
            RESULT=n1;:}
        | expr:a bin_op:b expr:c {: enlistar("expr bin_op expr "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            n1.addHijo(a);
            n1.addHijo(b);
            n1.addHijo(c);
            RESULT=n1;:}
        | MINUS expr:a {: enlistar("- expr "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            Nodo n2 = new Nodo("menos",contador);
            n1.addHijo(n2); 
            n1.addHijo(a);
            RESULT=n1;:}
        | EXCLA expr:a {: enlistar("! expr "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            Nodo n2 = new Nodo("excla",contador);
            n1.addHijo(n2); 
            n1.addHijo(a);
            RESULT=n1;:}
        | PARA expr:a PARC {: enlistar("( expr ) "+contador+"");contador++; 
            Nodo n1 = new Nodo("expr",contador);
            Nodo n2 = new Nodo("para_expr_para",contador);
            n1.addHijo(n2); 
            n2.addHijo(a);
            RESULT=n1;:};
expr2::=expr2:a COMMA expr:b {:
            contador++;
            a.addHijo(b);
            RESULT=a;:}
        | expr:a {:
            contador++;
            Nodo n1 = new Nodo("exprm",contador);
            n1.addHijo(a);
            RESULT=n1;:};
expr3::=expr2:a {:
            RESULT=a;:}
        | {:RESULT=null;:};

callout_arg::=expr:a {: enlistar("callout expr "+contador+"");contador++; 
            Nodo n1 = new Nodo("callout_arg",contador);
            n1.addHijo(a);
            RESULT=n1;:}
        |string_literal:a {: enlistar("callout string_literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("callout_arg",contador);
            n1.addHijo(a);
            RESULT=n1;:};
callout_argm::= COMMA callout_arg2:a {: enlistar("callout argument "+contador+""); 
            RESULT=a;:}
        | {:RESULT=null;:};
callout_arg2::=callout_arg2:a COMMA callout_arg:b {:contador++;
            a.addHijo(b);
            RESULT=a;:}
        | callout_arg:a {:contador++;
            Nodo n1 = new Nodo("callout_argm",contador);
            n1.addHijo(a);
            RESULT=n1;:};

method_name::=id:a {: enlistar(""+a+" "+contador+"");contador++; 
            Nodo n1 = new Nodo("method_name",contador);
            Nodo n2 = new Nodo("id",contador);
            n2.addHijo(a);
            n1.addHijo(n2);
            RESULT=n1;
            :};

location::=id:a {: enlistar("location"); 
            contador++;
            Nodo n1 = new Nodo("location",contador);
            Nodo n2 = new Nodo("id",contador);
            n2.addHijo(a);
            n1.addHijo(n2);
            RESULT=n1;:}
        | id:a CORC expr:b CORD {: enlistar("id[expr] "+contador+"");contador++; 
            Nodo n1 = new Nodo("location",contador);
            Nodo n2 = new Nodo("id[expr]",contador);
            Nodo n3 = new Nodo("id",contador);
            n3.addHijo(a);
            n2.addHijo(n3);
            n2.addHijo(b);
            n1.addHijo(n2);
            RESULT=n1;
            :};

bin_op::=arith_op:a {: enlistar("arith_op "+contador+"");contador++; 
            Nodo n1 = new Nodo("bin_op",contador);
            n1.addHijo(a);
            RESULT=n1;:}
        | rel_op:a {: enlistar("rel_op "+contador+"");contador++; 
            Nodo n1 = new Nodo("bin_op",contador);
            n1.addHijo(a);
            RESULT=n1;:}
        | eq_op:a {: enlistar("eq_op "+contador+"");contador++; 
            Nodo n1 = new Nodo("bin_op",contador);
            n1.addHijo(a);
            RESULT=n1;:}
        | cond_op:a {: enlistar("cond_op "+contador+"");contador++; 
            Nodo n1 = new Nodo("bin_op",contador);
            n1.addHijo(a);
            RESULT=n1;:};

arith_op::=PLUS {: enlistar("+ "+contador+"");contador++; 
            Nodo n1 = new Nodo("arith_op",contador);
            Nodo n2 = new Nodo("mas",contador);
            n1.addHijo(n2);
            RESULT=n1;
            :}
        | MINUS {: enlistar("- "+contador+"");contador++; 
            Nodo n1 = new Nodo("arith_op",contador);
            Nodo n2 = new Nodo("menos",contador);
            n1.addHijo(n2);
            RESULT=n1;:}
        | MORE {: enlistar("* "+contador+"");contador++; 
            Nodo n1 = new Nodo("arith_op",contador);
            Nodo n2 = new Nodo("multi",contador);
            n1.addHijo(n2);
            RESULT=n1;:}
        | DIV {: enlistar("/ "+contador+"");contador++; 
            Nodo n1 = new Nodo("arith_op",contador);
            Nodo n2 = new Nodo("div",contador);
            n1.addHijo(n2);
            RESULT=n1;:}
        | PERCENT {: enlistar("% "+contador+"");contador++; 
            Nodo n1 = new Nodo("arith_op",contador);
            Nodo n2 = new Nodo("percent",contador);
            n1.addHijo(n2);
            RESULT=n1;:};

rel_op::= MINUS2 {: enlistar("< "+contador+"");contador++; 
            Nodo n1 = new Nodo("rel_op",contador);
            Nodo n2 = new Nodo("menor",contador);
            n1.addHijo(n2);
            RESULT=n1;:}
        | MINUS3 {: enlistar("> "+contador+"");contador++;
            Nodo n1 = new Nodo("rel_op",contador);
            Nodo n2 = new Nodo("mayor",contador);
            n1.addHijo(n2);
            RESULT=n1;:}
        | MINUS2 EQUAL {: enlistar("<= "+contador+"");contador++; 
            Nodo n1 = new Nodo("rel_op",contador);
            Nodo n2 = new Nodo("menor_igual",contador);
            n1.addHijo(n2);
            RESULT=n1;:}
        | MINUS3 EQUAL {: enlistar(">= "+contador+"");contador++; 
            Nodo n1 = new Nodo("rel_op",contador);
            Nodo n2 = new Nodo("mayor_igual",contador);
            n1.addHijo(n2);
            RESULT=n1;:};

eq_op::=EQUAL EQUAL {: enlistar("== "+contador+"");contador++; 
            Nodo n1 = new Nodo("eq_op",contador);
            Nodo n2 = new Nodo("igual igual",contador);
            n1.addHijo(n2);
            RESULT=n1;:}
        | EXCLA EQUAL {: enlistar("!= "+contador+"");contador++; 
            Nodo n1 = new Nodo("eq_op",contador);
            Nodo n2 = new Nodo("exla igual",contador);
            n1.addHijo(n2);
            RESULT=n1;:};

cond_op::=CAFE CAFE {: enlistar("&& "+contador+"");contador++; 
            Nodo n1 = new Nodo("cond_op",contador);
            Nodo n2 = new Nodo("cafe_cafe",contador);
            n1.addHijo(n2);
            RESULT=n1;:}
        | OR OR {: enlistar("|| "+contador+"");contador++; 
            Nodo n1 = new Nodo("cond_op",contador);
            Nodo n2 = new Nodo("or_or",contador);
            n1.addHijo(n2);
            RESULT=n1;:};

literal::=NUM:a {: enlistar(""+a+ " "+contador+"");contador++; 
            Nodo n1 = new Nodo("literal",contador);
            Nodo n2 = new Nodo("int_literal",contador);
            Nodo n3 = new Nodo(a.toString(),contador);
            n2.addHijo(n3);
            n1.addHijo(n2);
            RESULT=n1;:}
        | bool_literal:a {: enlistar("bool literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("literal",contador);
            n1.addHijo(a);
            RESULT=n1;:}
        | char_literal:b {: enlistar("char literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("literal",contador);
            n1.addHijo(b);
            RESULT=n1;:};

bool_literal::=TRUE {: enlistar("TRUE "+contador+"");contador++; 
            Nodo n1 = new Nodo("bool_literal",contador);
            Nodo n2 = new Nodo("true",contador);
            n1.addHijo(n2);
            RESULT=n1;:}
        |FALSE {: enlistar("FALSE "+contador+"");contador++; 
            Nodo n1 = new Nodo("bool_literal",contador);
            Nodo n2 = new Nodo("false",contador);
            n1.addHijo(n2);
            RESULT=n1;:};

id::=alpha_num:a {:  enlistar(""+a+" "+contador+"");contador++; 
        Nodo n1 = new Nodo(a.toString(),contador);
        RESULT=n1;:};

string_literal::=QUOTE alpha_num:a QUOTE {: enlistar("string_literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("string_literal",contador);
            Nodo n2 = new Nodo(a.toString(),contador);
            n1.addHijo(n2);
            RESULT=n1;:};

char_literal::=SINGLEQUOTE alpha_num:a SINGLEQUOTE {: enlistar("char literal "+contador+"");contador++; 
            Nodo n1 = new Nodo("char_literal",contador);
            Nodo n2 = new Nodo(a.toString(),contador);
            n1.addHijo(n2);
            RESULT=n1;:};


